openapi: 3.0.3
info:
  title: Digital Staff Passport API
  version: __VERSION__  # Automatically populated by `scripts/calculate_version.py` at release-time
  description: |
    ## Overview
    Use this API standard to build an API that [Digital Staff Passport (DSP)](https://digital.nhs.uk/services/digital-staff-passport) can use to interact with your system.

    The standard supports the following use cases and external system types:

    | Use case | External system type |
    | get core skills | Learning management system |
    | send core skills | Learning management system |
    | Send right to work check information | Recruitment system |
    | Send DBS check supporting information | Recruitment system |
    
    The standard currently does not include:
    - support for 'pagination' of search results in the event of there being more than 50 matching employees

    ## Who can use this API standard
    You can only use this API standard if you are integrating your system with Digital Staff Passport.

    ## How this API standard works
    DSP needs to interact with a variety of external systems, to send and receive a variety of information.
    This API standard provides a common approach regardless of the type of external system, as explained below.

    ### Employee linking
    Before DSP can exchange information with an external system, it needs to 'link' the employee record using the external systems's unique identifier for that employee.

    There are two ways DSP can do this:
    - if the DSP user knows the employee's external system ID, DSP can use the [Get employee personal details](#get-/organisations/-org-id-/employees/-employee-id-) operation to allow the user to check it's the right ID
    - if the DSP user doesn't know the employee's external system ID, DSP can use the [Search for an employee](#get-/organisations/-org-id-/employees) operation to find the ID based on employee details such as name and date of birth

    ### Getting employee information
    Given the employee's external system ID, DSP can get information from the external system using the [Get employee records](#get-/organisations/-org-id-/employees/-employee-id-/records) operation.

    The type of information returned depends on the type of system. For example, a learning management system would return core skills records.
    
    ### Sending employee information
    Given the employee's external system ID, DSP can send information to the external system using the [Add an employee record](#post-/organisations/-org-id-/employees/-employee-id-/records) operation.

    The type of information sent depends on the type of system. For example, DSP might send identity information to a recruitment system in order to support varioius employment checks.

    ## Employee record types

    ### Core skills
    Core skills are a specific type of mandatory training that are common across all NHS organisations,
    and are generally aligned with the [Core Skills Training Framework (CSTF)](https://www.skillsforhealth.org.uk/core-skills-training-framework/).

    Core skills are not always part of the CSTF.
    For example, at the time of writing, Oliver McGowan Mandatory Training on Learning Disability and Autism is not part of the CSTF but is in scope for Digital Staff Passport.

    Core skills records are typically held in a learning managements system (LMS).
    This API standard supports:
    - DSP getting core skills from an LMS
    - DSP sending core skills to an LMS

    ### Right to work check information
    [Right to work checks](https://www.nhsemployers.org/publications/right-work-checks-standard) must be performed by all NHS employers.

    These checks are normally managed in a recruitment system.

    If the employee has completed digital identity verification via Digital Staff Passport, this information can be used to support the right to work check.

    Hence this API standard supports Digital Staff Passport sending right to work check information to a recruitment system.

    ### DBS check supporting information
    [Criminal record (DBS) checks](https://www.nhsemployers.org/publications/criminal-record-checks-standard) must be performed by all NHS employers.

    These checks are normally managed in a recruitment system.

    If the employee has completed digital identity verification via Digital Staff Passport, this information can be used to support the DBS check.

    Hence this API standard supports Digital Staff Passport sending DBS check supporting information to a recruitment system.

    ## Status
    This API standard is a [draft](https://digital.nhs.uk/developer/guides-and-documentation/reference-guide#statuses),
    meaning it is under development and might be subject to breaking changes.

    ## Service level
    Your API must be a bronze service, meaning it is operational and supported during business hours.

    For more details, see [service levels](https://digital.nhs.uk/developer/guides-and-documentation/reference-guide#service-levels).

    ## Technology
    This API standard is [RESTful](https://digital.nhs.uk/developer/guides-and-documentation/api-technologies-at-nhs-digital#basic-rest).

    It does not conform to the [FHIR](https://digital.nhs.uk/developer/guides-and-documentation/api-technologies-at-nhs-digital#fhir)
    global standard for health care data exchance because it is not a clinical API, it relates to workforce.
    This has been agreed with the [HL7 FHIR UK Board](https://www.hl7.org.uk/register/about-hl7-uk/management-board-members/).

    ## Network access
    Your API must be available on the internet.
    
    ## Security and authorisation
    Your API must use OAuth 2.0 'private key JWT' to authenticate and authorise Digital Staff Passport as the calling system.
    
    For more details, see [Authorisation using OAuth 2.0 private key JWT](https://digital.nhs.uk/developer/api-catalogue/digital-staff-passport-api-standard/authorisation-using-oauth-2.0-private-key-jwt).
    
    ## Errors
    We use standard HTTP status codes to show whether an API request succeeded or not. They are usually in the range:

    * 200 to 299 if it succeeded, including code 202 if it was accepted by an API that needs to wait for further action
    * 400 to 499 if it failed because of a client error by your application
    * 500 to 599 if it failed because of an error on our server
    
    Although this is not a FHIR API, errors are returned as FHIR [OperationOutcome](https://hl7.org/fhir/R4/operationoutcome.html) resources, in line with our API design guidance.

    For details of specific errors, see the 'Response' section for each operation. See our [reference guide](https://digital.nhs.uk/developer/guides-and-documentation/reference-guide#http-status-codes) for more on errors.

    ## Environments and testing
    You'll need to provide the following environments:

    | Environment | Suggested base URL |
    |---|---|
    | Integration test | `integration-test.<your domain>/dsp-api` |
    | Integration test | `<your domain>/dsp-api` |

    ### Single versus multiple instance systems
    If your system runs as a single instance supporting multiple employer organisations (sometimes called 'multiple tenant'), you should deploy it as per the suggested base URLs suggested above.

    If you have a separate instance of your system per employer organisation, you should deploy each instance at the following base URL:

    `<your domain>/dsp-api/organisations/<org ODS code>`

    In this case, you should alter the URL for the individual operations to exclude the `organisations\{org-id}` part, so that it isn't repeated.

    ### Integration testing
    Your integration test environment needs to include:
    - at least two organisations, so we can test cross-organisation security
    - sufficient test data to support a reasonable set of test scenarios - for example multiple people with the same surname or date of birth

    ## Onboarding
    We are currently running a pilot with one external system, so the API standard is not available for anyone else to onboard just yet. 
    
  contact:
    name: API Management Support
    email: api.management@nhs.net
    url: 'https://digital.nhs.uk/developer/help-and-support'
x-spec-publication:
  try-this-api:
    disabled: true
paths:
  /organisations/{org-id}/employees:
    get:
      operationId: search-for-employee
      summary: Search for an employee
      description: |
        This operation returns a list of employees that match the supplied search parameters.

        The following search parameters are supported:
        - first name
        - surname
        - date of birth

        All search parameters are optional, but at least one must be provided.

        If there are no matches, the operation returns an empty array, not an error.

        If there are more than 50 matches, the operation only returns the first 50.
        There is currently no way of knowing whether there are more than 50 matches.
        In the future we might add pagination.

      parameters:
        - $ref: '#/components/parameters/OrganisationId'
        - name: firstName
          in: query
          description: The employee's first name. Case insensitive.
          required: false
          example: 'Jane'
          schema:
            type: string
        - name: surname
          in: query
          description: The employee's surname. Case insensitive.
          required: false
          example: 'Smith'
          schema:
            type: string
        - name: birthDate
          in: query
          description: The employee's date of birth, in the format `YYYY-MM-DD`.
          required: false
          example: '1998-10-22'
          schema:
            type: string
        - $ref: '#/components/parameters/BearerAuthorization'
      responses:
        '200':
          description: A completed search. This might contain zero, one or many matching employees.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 50
                items:
                  $ref: '#/components/schemas/EmployeePersonalDetails'
              example:
                $ref: components/examples/SearchForAnEmployeeResponseSuccess.json
        '4XX':
          description: |
            An error occurred as follows:

            | HTTP status | Error code   | Description |
            | ----------- | ------------ | - |
            | 400         | invalid      | Invalid query parameter(s). |
            | 401         | forbidden    | OAuth 2.0 bearer token missing, invalid or expired, or calling application not enabled for this operation within the specified organisation. |
            | 404         | not-found    | Organisation not found for the given organisation ID. |
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                $ref: components/examples/SearchForAnEmployeeResponseError.json              
  /organisations/{org-id}/employees/{employee-id}:
    get:
      operationId: get-employee-personal-details
      summary: Get employee personal details
      description: |
        This operation returns personal details for a given employee.
        Use this operation if you already have the employee's ID but want to check it's the right ID.
      parameters:
        - $ref: '#/components/parameters/OrganisationId'
        - $ref: '#/components/parameters/EmployeeId'
        - $ref: '#/components/parameters/BearerAuthorization'
      responses:
        '200':
          description: Employee exists for the given ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeePersonalDetails'
              example:
                $ref: components/examples/GetEmployeePersonalDetailsResponseSuccess.json
        '4XX':
          description: |
            An error occurred as follows:

            | HTTP status | Error code   | Description |
            | ----------- | ------------ | --------------------------------------------- |
            | 401         | forbidden    | OAuth 2.0 bearer token missing, invalid or expired, or calling application not enabled for this operation within the specified organisation. |
            | 404         | not-found    | Organisation not found for the given organisation ID or employee not found for the given employee ID. |
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                $ref: components/examples/GetEmployeePersonalDetailsResponseError.json              
  /organisations/{org-id}/employees/{employee-id}/records:
    get:
      operationId: get-employee-records
      summary: Get employee records
      description: |
        ### Overview
        This operation returns a list of all data records available for a given employee.

        It supports the following record and external system types:
        
        | Record type | External system type       |
        | ----------- | -------------------------- |
        | Core skills | Learning management system |
        
      parameters:
        - $ref: '#/components/parameters/OrganisationId'
        - $ref: '#/components/parameters/EmployeeId'
        - $ref: '#/components/parameters/BearerAuthorization'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeRecords'
              example:
                $ref: components/examples/GetEmployeeRecordsResponseSuccess.json
        '4XX':
          description: |
            An error occurred as follows:

            | HTTP status | Error code   | Description |
            | ----------- | ------------ | - |
            | 401         | forbidden    | OAuth 2.0 bearer token missing, invalid or expired, or calling application not enabled for this operation within the specified organisation. |
            | 404         | not-found    | Organisation not found for the given organisation ID or employee not found for the given employee ID. |
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                $ref: components/examples/GetEmployeeRecordsResponseError.json              
    post:
      operationId: add-employee-record
      summary: Add an employee record
      description: |
        This operation adds a data record for a given employee.

        It supports the following record and external system types:
        
        | Record type                      | External system type       |
        | -------------------------------- | -------------------------- |
        | Core skills                      | Learning management system |
        | Right to work check information  | Recruitment system         |
        | DBS check supporting information | Recruitment system         |

      parameters:
        - $ref: '#/components/parameters/OrganisationId'
        - $ref: '#/components/parameters/EmployeeId'
        - $ref: '#/components/parameters/BearerAuthorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeRecord'
            examples:
              right-to-work:
                summary: Add a right to work record
                value:
                  $ref: components/examples/AddEmployeeRecordRequestRightToWork.json
              dbs-check-supporting-information:
                summary: Add a DBS check supporting information record
                value:
                  $ref: components/examples/AddEmployeeRecordRequestDBS.json
              core-skills:
                summary: Add a core skills record
                value:
                  $ref: components/examples/AddEmployeeRecordRequestCoreSkillsTraining.json
      responses:
        '201':
          description: Record created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeRecord'
              examples:
                right-to-work:
                  summary: Right to work record added
                  value:
                    $ref: components/examples/AddEmployeeRecordResponseRightToWork.json
                dbs-check-supporting-information:
                  summary: DBS check supporting information record added
                  value:
                    $ref: components/examples/AddEmployeeRecordResponseDBS.json
                core-skills:
                  summary: Core skills record added
                  value:
                    $ref: components/examples/AddEmployeeRecordResponseCoreSkillsTraining.json
        '4XX':
          description: |
            An error occurred as follows:

            | HTTP status | Error code   | Description |
            | ----------- | ------------ | - |
            | 400         | invalid      | Invalid data in request body, for example, missing mandatory field or invalid date format. |
            | 401         | forbidden    | OAuth 2.0 bearer token missing, invalid or expired, or calling application not enabled for this operation within the specified organisation. |
            | 404         | not-found    | Organisation not found for the given organisation ID or employee not found for the given employee ID. |
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                $ref: components/examples/AddEmployeeRecordResponseError.json
components:
  parameters:
    BearerAuthorization:
      in: header
      name: Authorization
      description: |
        The calling system's access token, which must be an OAuth 2.0 bearer token.
        For details, see [Authorisation using OAuth 2.0 private key JWT](https://digital.nhs.uk/developer/api-catalogue/digital-staff-passport-api-standard/authorisation-using-oauth-2.0-private-key-jwt).
      required: false
      schema:
        type: string
        format: '^Bearer\ [[:ascii:]]+$'
        example: 'Bearer g1112R_ccQ1Ebbb4gtHBP1aaaNM'
    OrganisationId:
      in: path
      name: org-id
      description: The ODS code for the employing organisation.
      required: true
      example: 'RHQ'
      schema:
        type: string
    EmployeeId:
      in: path
      name: employee-id
      description: The employee's primary unique identifier, as used by the external system.
      required: true
      example: '12345'
      schema:
        type: string
  schemas:
    EmployeePersonalDetails:
      type: object
      required:
        - id
        - firstName
        - surname
      properties:
        id:
          description: The employee's primary unique identifier, as used by the external system.
          type: string
          example: '12345'
        firstName:
          description: The employee's first name.
          type: string
          example: 'Jane'
        surname:
          description: The employee's surname.
          type: string
          example: 'Smith'
        birthDate:
          description: The employee's date of birth, in the format `YYYY-MM-DD`.
          type: string
          example: '1998-10-22'
        email:
          description: The employee's email address.
          type: string
          example: 'jane.smith@example.com'
        esrIdentifier:
          description: The employee's unique identifier in the ESR system.
          type: string
          example: '87654321'
    EmployeeRecords:
      type: object
      required:
        - id
        - records
      properties:
        id:
          description: The employee's primary unique identifier, as used by the external system.
          type: string
          example: '12345'
        records:
          description: The employee's records.
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/EmployeeRecord'
    EmployeeRecord:
      oneOf:
        - $ref: '#/components/schemas/RightToWork'
        - $ref: '#/components/schemas/DBSCheckSupportingInformation'
        - $ref: '#/components/schemas/CoreSkillsTraining'
    RightToWork:
      type: object
      description: Identity information to support a right to work check, as obtained and verified by an Identity Service Provider.
      required:
        - recordType
        - legalFirstName
        - legalSurname
        - birthDate
        - biometricPageImage
        - photograph
        - identityVerified
        - evidenceCheckedBy
        - dateOfIdCheck
        - GPG45profile
      properties:
        recordType:
          description: Type of record.
          type: string
          enum:
            - 'RightToWork'
        legalFirstName:
          description: The employee's legal first name, as it appears on their identity document.
          type: string
        middleNames:
          description: The employee's middle names, as they appear on their identity document.
          type: string
        legalSurname:
          description: The employee's legal surname, as it appears on their identity document.
          type: string
        birthDate:
          description: The employee's date of birth, in the format `YYYY-MM-DD`.
          type: string
        biometricPageImage:
          description: An image of the biometric page of the employee's identity document - JPEG format and [base64 encoded](https://datatracker.ietf.org/doc/html/rfc4648#section-4).
          type: string
        photograph:
          description: A photograph of the employee, as it appears on their identity document - JPEG format and [base64 encoded](https://datatracker.ietf.org/doc/html/rfc4648#section-4).
          type: string
        identityVerified:
          description: Whether the employee's identity has been verified - always `true`.
          type: boolean
        evidenceCheckedBy:
          description: Organisation that performed the identity check.
          type: string
        dateOfIdCheck:
          description: The date the ID check was performed, in the format `YYYY-MM-DD`.
          type: string
        GPG45profile:
          description: Code for the [identity profile](https://www.gov.uk/government/publications/identity-proofing-and-verification-of-an-individual/identity-profiles) for the identity check, for example `H1A`.
          type: string
    DBSCheckSupportingInformation:
      type: object
      description: Identity information to support a DBS check, as obtained and verified by an Identity Service Provider.
      required:
        - recordType
        - legalFirstName
        - legalSurname
        - birthDate
        - currentAddress
        - currentAddressVerified
        - dateOfAddressCheck
        - identityVerified
        - evidenceCheckedBy
        - GPG45profile
        - subjectId
# TBC other required fields        
      properties:
        recordType:
          description: Type of record.
          type: string
          enum:
            - 'DBSCheckInformation'
        legalFirstName:
          description: The employee's legal first name, as it appears on their identity document.
          type: string
        middleNames:
          description: The employee's middle names, as they appear on their identity document.
          type: string
        legalSurname:
          description: The employee's legal surname, as it appears on their identity document.
          type: string
        birthDate:
          description: The employee's date of birth, in the format `YYYY-MM-DD`.
          type: string
        currentAddress:
          description: The employee's current address, as it appears on their identity document.
          type: string
        currentAddressVerified:
          description: Whether the employee's current address has been verified by the IDSP. Alwats `true`.
          type: boolean
        dateOfAddressCheck:
          description: Date the address check was done, in the format `YYYY-MM-DD`.
          type: string
        identityVerified:
          description: Whether the employee's identity has been verified - always `true`.
          type: boolean
        evidenceCheckedBy:
          description: Organisation that performed the identity check.
          type: string
        GPG45profile:
          description: Code for the [identity profile](https://www.gov.uk/government/publications/identity-proofing-and-verification-of-an-individual/identity-profiles) for the identity check, for example `H1A`.
          type: string
        subjectId:
          description: Unique identifier for the identity check as shared between DSP and the IDSP. Generally expressed as a GUID.
          type: string
    CoreSkillsTraining:
      type: object
      description: A record of a core skill attained by the employee. In most cases this will be part of the [Core Skills Training Framework](https://www.skillsforhealth.org.uk/core-skills-training-framework/).
      required:
        - recordType
        - competencyFramework
        - statMandSubject
        - competencyName
        - subjectLevel
        - attainmentStatus
        - awardingOrganisation
        - dateLastAwarded
      properties:
        recordType:
          description: Type of record.
          type: string
          enum:
            - 'CoreSkillsTraining'
        competencyFramework:
          description: |
            Training framework. One of:
            * `CSTF` - Core Skills Training Framework
            * `MAND` - mandatory training outside of CSTF
          type: string
          enum:
           - 'CSTF'
           - 'MAND'
        statMandSubject:
# TBC rename to something more readable? YES
          description: |
            Subject name as defined in [Core Skills Training Framework naming conventions](www.skillsforhealth.org.uk/images/services/cstf/CSTF%20Naming%20Conventions%20%20Competencies%20on%20ESR%20June%202019.pdf).
            Specifically, this is the part of the subject name that appears before the level number. For example, if the subject name is `Resuscitation - Level 2 - Adult Basic Life Support - 1 Year`, this would be `Resuscitation`.
          type: string
          example: 'Resuscitation'
        competencyName:
          description: |
            Subject name as defined in [Core Skills Training Framework naming conventions](www.skillsforhealth.org.uk/images/services/cstf/CSTF%20Naming%20Conventions%20%20Competencies%20on%20ESR%20June%202019.pdf).
            Specifically, this is the part of the subject name that appears before the level number concatenated with the part that appears after the level number. For example, if the subject name is `Resuscitation - Level 2 - Adult Basic Life Support - 1 Year`, this would be `Resuscitation Adult Basic Life Support`.
          type: string
          example: 'Resuscitation Adult Basic Life Support'
        subjectLevel:
          description: |
            Subject level as defined in [Core Skills Training Framework naming conventions](www.skillsforhealth.org.uk/images/services/cstf/CSTF%20Naming%20Conventions%20%20Competencies%20on%20ESR%20June%202019.pdf).
            If the core skill has no subject level, it defaults to `1`.
          type: string
          example: '2'
        renewalPeriodNumber:
          description: The number associated with the core skill's renewal period. For example if the core skill renewal period is `2 Years`, this will be `2`.
          type: string
          example: '2'
        renewalPeriodUnits:
          description: The unit of measure associated with the core skill's renewal period. For example if the core skill renewal period is `2 Years`, this will be `Years`. If the renewal period is `1 Year`, this will be `Year` (singular).
          type: string
          example: 'Years'
        proficiencyLevel:
          description: Whether the core skill was assessed by the awarding organisation.
          type: string
          enum:
            - '0 - Not Assessed'
            - '1 - Assessed'
        attainmentStatus:
          description: Attainment status.
          type: string
          enum:
            - ACHIEVED
          example: ACHIEVED
        learningMethod:
          description: The method by which the core skill was obtained.
          type: string
          example: 'Examination'
        awardingOrganisation:
          description: The ODS code for the NHS organisation that awarded the core skill.
          type: string
          example: RHQ
        dateLastAwarded:
          description: The date when the core skill was most recently awarded, in the format `YYYY-MM-DD`.
          type: string
          example: '2023-11-01'
        dateTo:
          description: The date when the core skill expires, if appropriate, in the format `YYYY-MM-DD`.
          type: string
          example: '2024-10-31'
    Error:
      type: object
      required:
        - resourceType
        - issue
      properties:
        resourceType:
          description: The resource type.
          type: string
          enum:
            - OperationOutcome
        issue:
          description: List of issues that have occurred. Usually there will be just one.
          type: array
          minItems: 1
          items:
            type: object
            required:
              - severity
              - code
            properties:
              severity:
                description: Issue severity, as per [https://hl7.org/fhir/R4/valueset-issue-severity.html](https://hl7.org/fhir/R4/valueset-issue-severity.html).
                type: string
                enum:
                  - fatal
                  - error
                  - warning
                  - information
              code:
                description: Error or warning code, as per [https://hl7.org/fhir/R4/valueset-issue-type.html](https://hl7.org/fhir/R4/valueset-issue-type.html).
                type: string
                example: 'invalid'
              details:
                description: Additional details about the error or warning.
                type: object
                required:
                  - text
                properties:
                  text:
                    description: A text description of the error or warning.
                    type: string
                    example: 'Invalid format for birthDate query parameter - must be YYYY-MM-DD.'
