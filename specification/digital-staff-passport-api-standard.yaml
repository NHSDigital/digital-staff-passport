openapi: 3.0.3
info:
  title: Digital Staff Passport API
  version: __VERSION__  # Automatically populated by `scripts/calculate_version.py` at release-time
  description: |
    ## Overview
    Use this API standard to build an API that Digital Staff Passport (DSP) can use to get NHS employee records from your system.

    DSP can then allow the employee to pass the information on to their new employer.

    The standard includes:
    - searching for an employee in the source system
    - getting employee records from the source system

    The standard currently does not include:
    - details of how security will work
    - details of the required service level for the source system
    - support for multiple organisations - it assumes the source system only holds data for a single NHS organisation
    - support for 'pagination' of search results in the event of there being more than 50 matching employees
    - the ability to update employee records in the source system
    
    ## Who can use this API standard
    You can only use this API standard if you are integrating your system with Digital Staff Passport.

    ## Status
    This API standard is a [draft](https://digital.nhs.uk/developer/guides-and-documentation/reference-guide#statuses),
    meaning it is under development and might be subject to breaking changes.

    We are currently running a pilot with one external system and iterating the standard as we proceed.

    ## Service level
    Your API must be a bronze service, meaning it is operational and supported during business hours.

    For more details, see [service levels](https://digital.nhs.uk/developer/guides-and-documentation/reference-guide#service-levels).

    ## Technology
    This API standard is [RESTful](https://digital.nhs.uk/developer/guides-and-documentation/api-technologies-at-nhs-digital#basic-rest).

    It does not conform to the [FHIR](https://digital.nhs.uk/developer/guides-and-documentation/api-technologies-at-nhs-digital#fhir)
    global standard for health care data exchance because it is not a clinical API, it relates to workforce.
    This has been agreed with the [HL7 FHIR UK Board](https://www.hl7.org.uk/register/about-hl7-uk/management-board-members/).

    ## Network access
    Your API must be available on the internet.
    
    ## Security and authorisation
    Details to follow.

    ## Errors
    We use standard HTTP status codes to show whether an API request succeeded or not. They are usually in the range:

    * 200 to 299 if it succeeded, including code 202 if it was accepted by an API that needs to wait for further action
    * 400 to 499 if it failed because of a client error by your application
    * 500 to 599 if it failed because of an error on our server

    For details of specific errors, see the 'Response' section for each operation. See our [reference guide](https://digital.nhs.uk/developer/guides-and-documentation/reference-guide#http-status-codes) for more on errors.

    ## Environments and testing
    You'll need to:
    - deploy your API into an environment that we can use for integration testing
    - populate that environment with suitable test data

    ## Onboarding
    We are currently running a pilot with one external system, so the API standard is not available for anyone else to onboard just yet. 
    
  contact:
    name: API Management Support
    email: api.management@nhs.net
    url: 'https://digital.nhs.uk/developer/help-and-support'
x-spec-publication:
  try-this-api:
    disabled: true
paths:
  /employees:
    get:
      operationId: search-for-employee
      summary: Search for an employee
      description: |
        This operation returns a list of employees that match the supplied search parameters.

        The following search parameters are supported:
        - first name
        - surname
        - date of birth

        The operation returns a maximum of 50 matching employees.
        If there are more than 50 matches, it returns the first 50.
        There is currently no way of knowing whether there are more than 50 matches.
        In the future we might add pagination.

        All search parameters are optional, but if they are all omitted it is likely to result in a 'too many matches' error.

      parameters:
        - name: firstName
          in: query
          description: The employee's first name.
          required: false
          example: 'Jane'
          schema:
            type: string
        - name: surname
          in: query
          description: The employee's surname.
          required: false
          example: 'Smith'
          schema:
            type: string
        - name: birthDate
          in: query
          description: The employee's date of birth, in the format `yyyy-mm-dd`.
          required: false
          example: '1998-10-22'
          schema:
            type: string
      responses:
        '200':
          description: A completed search. This might contain zero, one or many matching employees.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 50
                items:
                  $ref: '#/components/schemas/EmployeePersonalDetails'
              example:
                $ref: components/examples/SearchForAnEmployeeHappyPathResponse.json
        '4XX':
          description: |
            An error occurred as follows:

            | HTTP status | Error code                 | Description |
            | ----------- | -------------------------- | --------------------------------------------- |
            | 400         | INVALID_SEARCH_PARAMETERS  | 
            | 401         | ACCESS_DENIED              | Access token missing, invalid or expired, or calling application not enabled for this operation. |
            | TBC         | TBC           | TBC	|
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                $ref: components/examples/ErrorResponse.json              
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
  /employees/{id}:
    get:
      operationId: get-employee-personal-details
      summary: Get employee personal details
      description: |
        This operation returns personal details for a given employee.
        Use this operation if you already have the employee's ID but want to check it's the right ID.
      parameters:
        - name: id
          in: path
          description: The employee's primary unique identifier, as used by the source system.
          required: true
          example: '12345'
          schema:
            type: string
      responses:
        '200':
          description: Employee exists for the given ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeePersonalDetails'
              example:
                $ref: components/examples/GetEmployeePersonalDetailsHappyPathResponse.json
        '4XX':
          description: |
            An error occurred as follows:

            | HTTP status | Error code                 | Description |
            | ----------- | -------------------------- | --------------------------------------------- |
            | TBC         | TBC           | TBC	|
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                $ref: components/examples/ErrorResponse.json              
  /employees/{id}/records:
    get:
      operationId: get-employee-records
      summary: Get employee records
      description: |
        This operation returns a list of all data records available for a given employee.
        The type of records returned depends on the type of system.
        For example, a learning management system would return training records.
      parameters:
        - name: id
          in: path
          description: The employee's primary unique identifier, as used by the source system.
          required: true
          example: '12345'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeRecords'
              example:
                $ref: components/examples/GetEmployeeRecordsHappyPathResponse.json
        '4XX':
          description: |
            An error occurred as follows:

            | HTTP status | Error code                 | Description |
            | ----------- | -------------------------- | --------------------------------------------- |
            | TBC         | TBC           | TBC	|
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                $ref: components/examples/ErrorResponse.json              
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
components:
  schemas:
    CoreSkillsTraining:
      type: object
      description: A record of a core skill attained by the employee, as per the [Core Skills Training Framework](https://www.skillsforhealth.org.uk/core-skills-training-framework/).
      required:
        - type
        - statMandSubject
# TBC other required fields?        
      properties:
        type:
          description: Type of record.
          type: string
          enum:
            - CoreSkillsTraining
        statMandSubject:
# TBC rename to something more readable? YES
# TBC would we be better using coded values for this? yes, maybe both, discuss with simon and CLS
          description: Statutary or mandatory subject name as defined in [Core Skills Training Framework naming conventions](www.skillsforhealth.org.uk/images/services/cstf/CSTF%20Naming%20Conventions%20%20Competencies%20on%20ESR%20June%202019.pdf).
          type: string
        level:
# TBC enumarated?
          description: Subject level as defined in [Core Skills Training Framework naming conventions](www.skillsforhealth.org.uk/images/services/cstf/CSTF%20Naming%20Conventions%20%20Competencies%20on%20ESR%20June%202019.pdf).
          type: string
        attainmentStatus:
# TBC what are the possible values - should it be "Attained" only? Achieved
          description: Attainment status.
          type: string
          enum:
            - Achieved
            - Failed
            - Lapsed
        competencyFramework:
# Do we even need this?        
          description: TBC framework - surely this is always CSTF?
          type: string
        competencyName:
# Feels like a duplicate attribute - or could a core skill be one that's not listed in the CSTF guide? not the same - find better example   
          description: TBC probably the same as statMandSubject
          type: string
        awardingOrg:
# TBC should this be employer? no
          description: The ODS code for the 
          type: string
        renewalPeriod:
# TBC what is this? Simon's example is "2"       
          description: TBC
          type: string
        units:
# TBC is this the units for the renewal period? Simon's example is "Year"
# TBC what are the possible values?
# TBC rename as renewalPeriodUnits? Make into an object renewalPeriod with two sub-fields amount and unit?
          description: TBC
          type: string
        learningMethod:
# TBC possible values e.g. "Test"  online/in person/hybrid?      
          description: TBC
          type: string
        dateTo:
# TBC is this when the training runs out?        
          description: TBC
          type: string
        lastDateAwarded:
# TBC        
          description: TBC
          type: string
        proficiencyLevel:
# TBC        
          description: TBC
          type: string
    EmployeePersonalDetails:
      type: object
      required:
        - id
        - firstName
        - surname
      properties:
        id:
          description: The employee's primary unique identifier, as used by the source system.
          type: string
        firstName:
          description: The employee's first name.
          type: string
        surname:
          description: The employee's surname.
          type: string
        birthDate:
          description: The employee's date of birth, in the format `yyyy-mm-dd`.
          type: string
        email:
          description: The employee's email address.
          type: string
        esrIdentifier:
# TBC is the example esr ID a valid example?        
          description: The employee's unique identifier in the ESR system.
          type: string
    EmployeeRecords:
      type: object
      required:
        - id
        - records
      properties:
        id:
          description: The employee's primary unique identifier, as used by the source system.
          type: string
        records:
          description: The employee's records.
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/CoreSkillsTraining'
          nullable: true
    Error:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
